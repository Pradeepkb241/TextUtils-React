{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7ec6b91b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li> */}\r\n\r\n\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\" role=\"search\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode ==='light'? 'dark':'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set text here\",\r\n    aboutText: \"about text here\"\r\n}","import React,{useState}from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase !','success');\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase !','success');\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert('Cleared Text!','success');\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Copied to Clipboard!','success');\r\n\r\n    }\r\n\r\n    const handleExtraSpace =()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra space Removed!','success');\r\n    }\r\n\r\n    const handleOnChange =(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text , setText]= useState(\"\");\r\n    return (\r\n        <>\r\n        <div className='container' style={{color: props.mode ==='dark'? 'white':'#040316'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style={{backgroundColor: props.mode ==='dark'? 'grey':'white',color: props.mode ==='dark'? 'white':'#040316'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode ==='dark'? 'white':'#040316'}}>\r\n            <h2>Your text Summary</h2>\r\n            <p>{text.split(' ').length} words and {text.length} character</p>\r\n            <p>{0.008 * text.split(' ').length} Minutes to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0 ?text:\"Enter something in the above textbox to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const[mode, setMode] = useState('light');\n  const[alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n\n     setTimeout(() => {\n        setAlert(null);\n      }, 1000);\n  }\n  const toggleMode = ()=>{\n     if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#040316';\n      showAlert('Dark Mode has been enabled','success');\n      document.title = 'TextUtil-Dark mode';\n\n     }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode has been enabled','success');\n      document.title='TextUtil -Light mode';\n     }\n  }\n  return (\n    <>\n       {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About textUtils\" mode ={mode} toggleMode = {toggleMode} />\n      <Alert alert = {alert}/>\n      <div className=\"container my-3\">\n      {/* <Routes>\n          <Route exact path=\"/\" element={<TextForm showAlert = {showAlert} heading = \"Enter text here to analyze\" mode = {mode}/>}>\n            \n          </Route>\n          <Route exact path=\"/about\" element={<About />}>\n            \n          </Route>\n      </Routes> */}\n      <TextForm showAlert = {showAlert} heading = \"Enter text here to analyze\" mode = {mode}/>\n      </div>\n      {/* </BrowserRouter> */}\n  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}